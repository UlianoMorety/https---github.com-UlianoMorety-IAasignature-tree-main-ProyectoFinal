import google.generativeai as genai
import logging
import json
import asyncio
from typing import Dict, List, Any

logger = logging.getLogger(__name__)

class GeminiIntegration:
    def __init__(self, api_key: str):
        self.api_key = api_key
        self.setup_gemini()
        
    def setup_gemini(self):
        """Configura la API de Gemini"""
        try:
            genai.configure(api_key=self.api_key)
            self.model = genai.GenerativeModel('gemini-pro')
            logger.info("Integraci√≥n con Gemini configurada correctamente")
        except Exception as e:
            logger.error(f"Error configurando Gemini: {e}")
            raise

    async def generate_feedback(self, profile: Dict, interview_answers: List[Dict]) -> str:
        """Genera retroalimentaci√≥n personalizada usando IA"""
        try:
            # Construir prompt para IA
            prompt = self._build_feedback_prompt(profile, interview_answers)
            
            # Generar respuesta
            response = await self._generate_response(prompt)
            
            # Procesar y limpiar respuesta
            feedback = self._process_feedback(response)
            
            return feedback
            
        except Exception as e:
            logger.error(f"Error generando feedback: {e}")
            return self._generate_fallback_feedback(profile)

    def _build_feedback_prompt(self, profile: Dict, interview_answers: List[Dict]) -> str:
        """Construye el prompt para generar retroalimentaci√≥n"""
        
        # Informaci√≥n del perfil
        profile_info = f"""
        PERFIL DEL CANDIDATO:
        - Tipo: {profile.get('type', 'No definido')}
        - Descripci√≥n: {profile.get('description', 'No disponible')}
        - Puntuaciones: {json.dumps(profile.get('scores', {}), indent=2)}
        """
        
        # Respuestas de la entrevista
        answers_info = "RESPUESTAS DE LA ENTREVISTA:\n"
        for i, qa in enumerate(interview_answers, 1):
            answers_info += f"""
            Pregunta {i}: {qa['question']}
            Respuesta: {qa['answer']}
            ---
            """
        
        # Prompt completo
        prompt = f"""
        Act√∫a como un experto en recursos humanos y coach de entrevistas laborales.
        
        {profile_info}
        
        {answers_info}
        
        INSTRUCCIONES:
        1. Analiza las respuestas del candidato considerando su perfil psicol√≥gico
        2. Identifica fortalezas espec√≠ficas demostradas en las respuestas
        3. Se√±ala √°reas de mejora concretas y accionables
        4. Proporciona consejos pr√°cticos para futuras entrevistas
        5. Mant√©n un tono motivacional y constructivo
        6. Limita tu respuesta a 300 palabras m√°ximo
        
        FORMATO DE RESPUESTA:
        **üéØ FORTALEZAS IDENTIFICADAS:**
        - [Lista de fortalezas espec√≠ficas]
        
        **üìà √ÅREAS DE MEJORA:**
        - [Lista de mejoras concretas]
        
        **üí° CONSEJOS PR√ÅCTICOS:**
        - [Recomendaciones espec√≠ficas]
        
        **üöÄ MENSAJE MOTIVACIONAL:**
        [Mensaje final de √°nimo personalizado]
        
        Genera una retroalimentaci√≥n espec√≠fica, profesional y motivadora.
        """
        
        return prompt

    async def _generate_response(self, prompt: str) -> str:
        """Genera respuesta usando Gemini"""
        try:
            # Ejecutar en un hilo separado para evitar bloqueo
            loop = asyncio.get_event_loop()
            response = await loop.run_in_executor(
                None, 
                lambda: self.model.generate_content(prompt)
            )
            
            return response.text
            
        except Exception as e:
            logger.error(f"Error generando respuesta con Gemini: {e}")
            raise

    def _process_feedback(self, raw_feedback: str) -> str:
        """Procesa y limpia la retroalimentaci√≥n generada"""
        try:
            # Limpiar y formatear la respuesta
            feedback = raw_feedback.strip()
            
            # Verificar que la respuesta no est√© vac√≠a
            if not feedback:
                raise ValueError("Respuesta vac√≠a de la IA")
            
            # Limitar longitud si es necesario
            if len(feedback) > 1500:
                feedback = feedback[:1500] + "..."
            
            return feedback
            
        except Exception as e:
            logger.error(f"Error procesando feedback: {e}")
            return self._generate_fallback_feedback({})

    def _generate_fallback_feedback(self, profile: Dict) -> str:
        """Genera retroalimentaci√≥n de respaldo si falla la IA"""
        profile_type = profile.get('type', 'Anal√≠tico')
        
        fallback_messages = {
            'Dominante': """
            **üéØ FORTALEZAS IDENTIFICADAS:**
            - Muestras liderazgo natural y capacidad de toma de decisiones
            - Tienes orientaci√≥n a resultados y objetivos claros
            
            **üìà √ÅREAS DE MEJORA:**
            - Desarrolla m√°s la escucha activa en tus respuestas
            - Incluye m√°s ejemplos de trabajo en equipo
            
            **üí° CONSEJOS PR√ÅCTICOS:**
            - Practica respuestas que muestren empat√≠a y colaboraci√≥n
            - Prepara ejemplos espec√≠ficos con m√©tricas de √©xito
            
            **üöÄ MENSAJE MOTIVACIONAL:**
            Tu perfil de liderazgo es una gran fortaleza. Sigue desarrollando tu capacidad de comunicaci√≥n y tendr√°s entrevistas exitosas.
            """,
            
            'Influyente': """
            **üéØ FORTALEZAS IDENTIFICADAS:**
            - Excelente capacidad comunicativa y carisma natural
            - Facilidad para conectar con otros y generar confianza
            
            **üìà √ÅREAS DE MEJORA:**
            - Agrega m√°s detalles t√©cnicos y datos concretos
            - Estructura mejor tus respuestas con ejemplos espec√≠ficos
            
            **üí° CONSEJOS PR√ÅCTICOS:**
            - Prepara an√©cdotas con resultados medibles
            - Practica el m√©todo STAR para respuestas estructuradas
            
            **üöÄ MENSAJE MOTIVACIONAL:**
            Tu habilidad para comunicarte es excepcional. Combinada con preparaci√≥n t√©cnica, ser√°s imparable en cualquier entrevista.
            """,
            
            'Estable': """
            **üéØ FORTALEZAS IDENTIFICADAS:**
            - Demuestras confiabilidad y consistencia
            - Capacidad de trabajo en equipo y colaboraci√≥n
            
            **üìà √ÅREAS DE MEJORA:**
            - Muestra m√°s iniciativa y proactividad en tus ejemplos
            - Desarrolla respuestas que destaquen tu capacidad de liderazgo
            
            **üí° CONSEJOS PR√ÅCTICOS:**
            - Prepara historias donde hayas tomado la iniciativa
            - Practica proyectar m√°s confianza en tu lenguaje corporal
            
            **üöÄ MENSAJE MOTIVACIONAL:**
            Tu estabilidad y confiabilidad son cualidades muy valoradas. Proyecta m√°s seguridad y destacar√°s en cualquier proceso.
            """,
            
            'Anal√≠tico': """
            **üéØ FORTALEZAS IDENTIFICADAS:**
            - Capacidad de an√°lisis detallado y pensamiento cr√≠tico
            - Atenci√≥n a los detalles y enfoque metodol√≥gico
            
            **üìà √ÅREAS DE MEJORA:**
            - S√© m√°s conciso en tus respuestas
            - Muestra m√°s tu lado humano y habilidades interpersonales
            
            **üí° CONSEJOS PR√ÅCTICOS:**
            - Practica resumir ideas complejas de forma simple
            - Prepara ejemplos que muestren tu capacidad de adaptaci√≥n
            
            **üöÄ MENSAJE MOTIVACIONAL:**
            Tu capacidad anal√≠tica es tu superpoder. Comb√≠nala con storytelling efectivo y ser√°s el candidato ideal.
            """
        }
        
        return fallback_messages.get(profile_type, fallback_messages['Anal√≠tico'])

    async def generate_interview_question(self, profile: Dict, previous_answers: List[Dict] = None) -> str:
        """Genera preguntas de entrevista personalizadas basadas en el perfil"""
        try:
            prompt = f"""
            Genera una pregunta de entrevista laboral personalizada para un candidato con perfil {profile.get('type', 'Anal√≠tico')}.
            
            Descripci√≥n del perfil: {profile.get('description', '')}
            
            Criterios:
            - La pregunta debe ser espec√≠fica para este tipo de perfil
            - Debe permitir al candidato demostrar sus fortalezas
            - Debe ser profesional y realista
            - M√°ximo 2 l√≠neas
            
            Responde solo con la pregunta, sin explicaciones adicionales.
            """
            
            response = await self._generate_response(prompt)
            return response.strip()
            
        except Exception as e:
            logger.error(f"Error generando pregunta personalizada: {e}")
            return self._get_fallback_question(profile)

    def _get_fallback_question(self, profile: Dict) -> str:
        """Pregunta de respaldo si falla la generaci√≥n con IA"""
        profile_type = profile.get('type', 'Anal√≠tico')
        
        fallback_questions = {
            'Dominante': "¬øC√≥mo manejas situaciones donde necesitas tomar decisiones r√°pidas con informaci√≥n limitada?",
            'Influyente': "Describe una situaci√≥n donde tuviste que persuadir a un equipo para adoptar tu idea.",
            'Estable': "¬øC√≥mo te adaptas a cambios inesperados en proyectos importantes?",
            'Anal√≠tico': "Explica un problema complejo que resolviste y el proceso que seguiste."
        }
        
        return fallback_questions.get(profile_type, fallback_questions['Anal√≠tico'])

    async def evaluate_answer_quality(self, question: str, answer: str) -> Dict:
        """Eval√∫a la calidad de una respuesta espec√≠fica"""
        try:
            prompt = f"""
            Eval√∫a la siguiente respuesta de entrevista:
            
            PREGUNTA: {question}
            RESPUESTA: {answer}
            
            Califica del 1 al 10 en estas categor√≠as:
            - Claridad: ¬øQu√© tan clara es la respuesta?
            - Relevancia: ¬øQu√© tan relevante es para la pregunta?
            - Especificidad: ¬øIncluye ejemplos concretos?
            - Profesionalismo: ¬øQu√© tan profesional suena?
            
            Responde en formato JSON:
            {
                "claridad": n√∫mero,
                "relevancia": n√∫mero,
                "especificidad": n√∫mero,
                "profesionalismo": n√∫mero,
                "puntuacion_total": n√∫mero,
                "comentario_breve": "texto"
            }
            """
            
            response = await self._generate_response(prompt)
            
            # Intentar parsear JSON
            try:
                evaluation = json.loads(response)
                return evaluation
            except json.JSONDecodeError:
                # Si falla el parsing, crear evaluaci√≥n b√°sica
                return {
                    "claridad": 7,
                    "relevancia": 7,
                    "especificidad": 6,
                    "profesionalismo": 7,
                    "puntuacion_total": 6.75,
                    "comentario_breve": "Respuesta adecuada con espacio para mejorar"
                }
                
        except Exception as e:
            logger.error(f"Error evaluando respuesta: {e}")
            return {
                "claridad": 6,
                "relevancia": 6,
                "especificidad": 5,
                "profesionalismo": 6,
                "puntuacion_total": 5.75,
                "comentario_breve": "Evaluaci√≥n no disponible"
            }

    def get_personalized_tips(self, profile: Dict) -> List[str]:
        """Obtiene consejos personalizados basados en el perfil"""
        profile_type = profile.get('type', 'Anal√≠tico')
        
        tips = {
            'Dominante': [
                "Muestra c√≥mo tu liderazgo beneficia al equipo",
                "Incluye ejemplos de toma de decisiones dif√≠ciles",
                "Demuestra tu capacidad de delegar efectivamente",
                "Habla sobre c√≥mo manejas la presi√≥n y los plazos"
            ],
            'Influyente': [
                "Comparte historias que demuestren tu capacidad de persuasi√≥n",
                "Habla sobre c√≥mo motivas a otros hacia objetivos comunes",
                "Incluye ejemplos de networking y construcci√≥n de relaciones",
                "Muestra tu adaptabilidad en diferentes audiencias"
            ],
            'Estable': [
                "Destaca tu confiabilidad con ejemplos espec√≠ficos",
                "Muestra c√≥mo contribuyes a la armon√≠a del equipo",
                "Habla sobre tu capacidad de mantener calidad bajo presi√≥n",
                "Incluye ejemplos de apoyo a colegas en momentos dif√≠ciles"
            ],
            'Anal√≠tico': [
                "Presenta datos y m√©tricas que respalden tus logros",
                "Muestra tu proceso de toma de decisiones basado en datos",
                "Habla sobre c√≥mo tu atenci√≥n al detalle previno problemas",
                "Incluye ejemplos de an√°lisis que mejoraron procesos"
            ]
        }
        
        return tips.get(profile_type, tips['Anal√≠tico'])

    async def health_check(self) -> bool:
        """Verifica que la integraci√≥n con IA funcione correctamente"""
        try:
            test_prompt = "Responde con 'OK' si recibes este mensaje."
            response = await self._generate_response(test_prompt)
            return 'OK' in response.upper()
        except Exception as e:
            logger.error(f"Health check fall√≥: {e}")
            return False